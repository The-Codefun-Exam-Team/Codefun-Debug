generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "suzume"]
}

model GooseDbVersion {
  id        Int       @id @default(autoincrement())
  versionId BigInt    @map("version_id")
  isApplied Boolean   @map("is_applied")
  tstamp    DateTime? @default(now()) @db.Timestamp(6)

  @@map("goose_db_version")
  @@schema("public")
}

model Groups {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(128)
  users Users[]

  @@map("groups")
  @@schema("public")
}

model PasswordResets {
  userId    Int      @map("user_id")
  token     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime @default(dbgenerated("(now() + '01:00:00'::interval)")) @map("expires_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("password_resets")
  @@schema("public")
}

model PostComments {
  id        Int      @id(map: "btree") @default(autoincrement())
  postId    Int      @map("post_id")
  authorId  Int      @map("author_id")
  parentId  Int?     @map("parent_id")
  content   String   @db.VarChar(32000)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts     Posts    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([postId, id], map: "post_comments_post")
  @@index([updatedAt(sort: Desc)], map: "post_comments_updated_at")
  @@map("post_comments")
  @@schema("public")
}

model Posts {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(128)
  authorId      Int            @map("author_id")
  content       String         @db.VarChar(32000)
  isOfficial    Boolean        @default(false) @map("is_official")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  post_comments PostComments[]
  users         Users          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([updatedAt(sort: Desc)], map: "posts_updated_at")
  @@map("posts")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Problems {
  id            Int           @id @default(autoincrement())
  setterId      Int           @map("setter_id")
  problemCode   String        @unique @map("problem_code") @db.VarChar(32)
  name          String        @db.VarChar(128)
  score_type    ScoreType
  problemGroup  String        @map("problem_group") @db.VarChar(128)
  statements    String        @db.VarChar(32000)
  timeLimit     Decimal       @map("time_limit") @db.Decimal(4, 2)
  score         Decimal       @db.Decimal(9, 2)
  checkerSource String?       @map("checker_source") @db.VarChar(32000)
  solvedCount   Int           @map("solved_count")
  totalAttempts Int           @map("total_attempts")
  users         Users         @relation(fields: [setterId], references: [id], onUpdate: NoAction)
  submissions   Submissions[]

  @@unique([problemCode, id, name], map: "problems_problem_code_header")
  @@map("problems")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Submissions {
  id          Int              @id @default(autoincrement())
  problemId   Int              @map("problem_id")
  userId      Int              @map("user_id")
  language    Language
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  result      SubmissionResult
  runningTime Decimal          @default(0) @map("running_time") @db.Decimal(5, 3)
  score       Decimal          @default(0) @db.Decimal(9, 2)
  isBest      Boolean          @map("is_best")
  source      String           @db.VarChar(32000)
  judgeOutput String?          @map("judge_output")
  scoredAt    DateTime?        @map("scored_at") @db.Timestamptz(6)
  problems    Problems         @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       Users            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([problemId, score, id, userId], map: "submissions_problems_score")
  @@index([problemId, id(sort: Desc)], map: "subs_by_problem")
  @@index([userId, id(sort: Desc)], map: "subs_by_user")
  @@index([userId, problemId, id(sort: Desc)], map: "subs_by_user_problem")
  @@map("submissions")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Users {
  id             Int              @id @default(autoincrement())
  username       String           @unique @db.VarChar(32)
  groupId        Int              @map("group_id")
  password       String           @db.VarChar(128)
  email          String?          @unique @db.VarChar(128)
  displayName    String           @map("display_name") @db.VarChar(128)
  user_status    UserStatus       @default(normal)
  score          Decimal          @default(0) @db.Decimal(9, 2)
  solvedCount    Int              @default(0) @map("solved_count")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  lastLoginAt    DateTime         @default(now()) @map("last_login_at") @db.Timestamptz(6)
  passwordResets PasswordResets[]
  post_comments  PostComments[]
  posts          Posts[]
  problems       Problems[]
  submissions    Submissions[]
  groups         Groups           @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([score(sort: Desc), id], map: "users_ranking")
  @@schema("public")
	@@map("users")
}

enum Language {
  C__     @map("C++")
  Pascal
  Java
  Python2
  Python3
  Go
  Nasm

  @@map("language")
  @@schema("public")
}

enum ScoreType {
  acm
  oi

  @@map("score_type")
  @@schema("public")
}

enum SubmissionResult {
  AC
  CE
  DQ
  MLE
  Q
  RTE
  SS
  TLE
  TO
  WA
  Scoring @map("...")

  @@map("submission_result")
  @@schema("public")
}

enum UserStatus {
  normal
  admin
  banned

  @@map("user_status")
  @@schema("public")
}
