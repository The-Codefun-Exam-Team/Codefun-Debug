generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "suzume"]
}

model GooseDbVersion {
  id        Int       @id @default(autoincrement())
  versionId BigInt    @map("version_id")
  isApplied Boolean   @map("is_applied")
  tstamp    DateTime? @default(now()) @db.Timestamp(6)

  @@map("goose_db_version")
  @@schema("public")
}

model Groups {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(128)
  users Users[]

  @@map("groups")
  @@schema("public")
}

model PasswordResets {
  userId    Int      @map("user_id")
  token     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime @default(dbgenerated("(now() + '01:00:00'::interval)")) @map("expires_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("password_resets")
  @@schema("public")
}

model PostComments {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  authorId  Int      @map("author_id")
  parentId  Int?     @map("parent_id")
  content   String   @db.VarChar(32000)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts     Posts    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([postId, id], map: "post_comments_post")
  @@index([updatedAt(sort: Desc)], map: "post_comments_updated_at")
  @@map("post_comments")
  @@schema("public")
}

model Posts {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(128)
  authorId      Int            @map("author_id")
  content       String         @db.VarChar(32000)
  isOfficial    Boolean        @default(false) @map("is_official")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  post_comments PostComments[]
  users         Users          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([updatedAt(sort: Desc)], map: "posts_updated_at")
  @@map("posts")
  @@schema("public")
}

model Problems {
  id            Int           @id @default(autoincrement())
  setterId      Int           @map("setter_id")
  problemCode   String        @unique @map("problem_code") @db.VarChar(32)
  name          String        @db.VarChar(128)
  score_type    ScoreType
  problemGroup  String        @map("problem_group") @db.VarChar(128)
  statements    String        @db.VarChar(32000)
  timeLimit     Decimal       @map("time_limit") @db.Decimal(4, 2)
  score         Decimal       @db.Decimal(9, 2)
  checkerSource String?       @map("checker_source") @db.VarChar(32000)
  solvedCount   Int           @map("solved_count")
  totalAttempts Int           @map("total_attempts")
  users         Users         @relation(fields: [setterId], references: [id], onUpdate: NoAction)
  submissions   Submissions[]

  @@unique([problemCode, id, name], map: "problems_problem_code_header")
  @@map("problems")
  @@schema("public")
}

model Submissions {
  id          Int              @id @default(autoincrement())
  problemId   Int              @map("problem_id")
  userId      Int              @map("user_id")
  language    Language
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  result      SubmissionResult
  runningTime Decimal          @default(0) @map("running_time") @db.Decimal(5, 3)
  score       Decimal          @default(0) @db.Decimal(9, 2)
  isBest      Boolean          @map("is_best")
  source      String           @db.VarChar(32000)
  judgeOutput String?          @map("judge_output")
  scoredAt    DateTime?        @map("scored_at") @db.Timestamptz(6)
  problems    Problems         @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       Users            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([problemId, score, id, userId], map: "submissions_problems_score")
  @@index([problemId, id(sort: Desc)], map: "subs_by_problem")
  @@index([userId, id(sort: Desc)], map: "subs_by_user")
  @@index([userId, problemId, id(sort: Desc)], map: "subs_by_user_problem")
  @@map("submissions")
  @@schema("public")
}

model Users {
  id             Int              @id @default(autoincrement())
  username       String           @unique @db.VarChar(32)
  groupId        Int              @map("group_id")
  password       String           @db.VarChar(128)
  email          String?          @unique @db.VarChar(128)
  displayName    String           @map("display_name") @db.VarChar(128)
  user_status    UserStatus       @default(normal)
  score          Decimal          @default(0) @db.Decimal(9, 2)
  solvedCount    Int              @default(0) @map("solved_count")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  lastLoginAt    DateTime         @default(now()) @map("last_login_at") @db.Timestamptz(6)
  passwordResets PasswordResets[]
  post_comments  PostComments[]
  posts          Posts[]
  problems       Problems[]
  submissions    Submissions[]
  groups         Groups           @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([score(sort: Desc), id], map: "users_ranking")
  @@map("users")
  @@schema("public")
}

view user_query {
  user_id      Int        @unique
  username     String     @db.VarChar(32)
  display_name String     @db.VarChar(128)
  group_id     Int
  group_name   String     @db.VarChar(128)
  user_status  UserStatus
  email        String     @db.VarChar(128)
  user_score   Decimal    @db.Decimal(9, 2)
  user_solved  Int
  user_ratio   Decimal    @db.Decimal(9, 2)
  user_rank    BigInt

  @@schema("public")
}

view stats {
  problem_count BigInt @unique

  @@schema("public")
}

view problem_listing {
  problem_id         Int        @unique
  problem_code       String     @db.VarChar(32)
  problem_name       String     @db.VarChar(128)
  user_id            Int
  username           String     @db.VarChar(32)
  display_name       String     @db.VarChar(128)
  group_id           Int
  group_name         String     @db.VarChar(128)
  user_status        UserStatus
  email              String?    @db.VarChar(128)
  user_score         Decimal    @db.Decimal(9, 2)
  user_solved        Int
  user_ratio         Decimal    @db.Decimal(9, 2)
  user_rank          BigInt
  score_type         ScoreType
  problem_group      String     @db.VarChar(128)
  problem_time_limit Decimal    @db.Decimal(4, 2)
  problem_score      Decimal    @db.Decimal(9, 2)
  problem_checker    String     @db.VarChar(32000)
  problem_solved     Int
  problem_total      Int

  @@schema("public")
}

view post_comment_query {
  user_id            Int
  username           String     @db.VarChar(32)
  display_name       String     @db.VarChar(128)
  group_id           Int
  group_name         String     @db.VarChar(128)
  user_status        UserStatus
  email              String?    @db.VarChar(128)
  user_score         Decimal    @db.Decimal(9, 2)
  user_solved        Int
  user_ratio         Decimal    @db.Decimal(9, 2)
  user_rank          BigInt
  comment_id         Int
  comment_post_id    Int
  comment_content    String     @db.VarChar(32000)
  comment_created_at DateTime   @db.Timestamptz(6)
  comment_updated_at DateTime   @db.Timestamptz(6)
  comment_parent_id  Int

  @@unique([comment_id, comment_post_id])
  @@schema("public")
}

view post_query {
  user_id            Int
  username           String     @db.VarChar(32)
  display_name       String     @db.VarChar(128)
  group_id           Int
  group_name         String     @db.VarChar(128)
  user_status        UserStatus
  email              String     @db.VarChar(128)
  user_score         Decimal    @db.Decimal(9, 2)
  user_solved        Int
  user_ratio         Decimal    @db.Decimal(9, 2)
  user_rank          BigInt
  post_id            Int        @unique
  post_title         String     @db.VarChar(128)
  post_content       String     @db.VarChar(32000)
  post_is_official   Boolean
  post_created_at    DateTime   @db.Timestamptz(6)
  post_updated_at    DateTime   @db.Timestamptz(6)
  post_comment_count BigInt

  @@schema("public")
}

view problem_query {
  problem_id         Int        @unique
  problem_code       String     @db.VarChar(32)
  problem_name       String     @db.VarChar(128)
  user_id            Int
  username           String     @db.VarChar(32)
  display_name       String     @db.VarChar(128)
  group_id           Int
  group_name         String     @db.VarChar(128)
  user_status        UserStatus
  email              String     @db.VarChar(128)
  user_score         Decimal    @db.Decimal(9, 2)
  user_solved        Int
  user_ratio         Decimal    @db.Decimal(9, 2)
  user_rank          BigInt
  score_type         ScoreType
  problem_group      String     @db.VarChar(128)
  problem_time_limit Decimal    @db.Decimal(4, 2)
  problem_score      Decimal    @db.Decimal(9, 2)
  problem_checker    String     @db.VarChar(32000)
  problem_solved     Int
  problem_total      Int
  problem_statements String     @db.VarChar(32000)

  @@schema("public")
}

view submission_listing {
  sub_id           Int              @unique
  problem_id       Int
  problem_code     String           @db.VarChar(32)
  problem_name     String           @db.VarChar(128)
  user_id          Int
  username         String           @db.VarChar(32)
  display_name     String           @db.VarChar(128)
  group_id         Int
  group_name       String           @db.VarChar(128)
  user_status      UserStatus
  email            String?          @db.VarChar(128)
  user_score       Decimal          @db.Decimal(9, 2)
  user_solved      Int
  user_ratio       Decimal          @db.Decimal(9, 2)
  user_rank        BigInt
  sub_language     Language
  sub_result       SubmissionResult
  sub_created_at   DateTime         @db.Timestamptz(6)
  sub_running_time Decimal          @db.Decimal(5, 3)
  sub_is_best      Boolean
  sub_score        Decimal          @db.Decimal(9, 2)

  @@schema("public")
}

view submission_query {
  sub_id           Int              @unique
  problem_id       Int
  problem_code     String           @db.VarChar(32)
  problem_name     String           @db.VarChar(128)
  user_id          Int
  username         String           @db.VarChar(32)
  display_name     String           @db.VarChar(128)
  group_id         Int
  group_name       String           @db.VarChar(128)
  user_status      UserStatus
  email            String           @db.VarChar(128)
  user_score       Decimal          @db.Decimal(9, 2)
  user_solved      Int
  user_ratio       Decimal          @db.Decimal(9, 2)
  user_rank        BigInt
  sub_language     Language
  sub_result       SubmissionResult
  sub_created_at   DateTime         @db.Timestamptz(6)
  sub_running_time Decimal          @db.Decimal(5, 3)
  sub_is_best      Boolean
  sub_score        Decimal          @db.Decimal(9, 2)
  sub_code         String           @db.VarChar(32000)
  sub_judge        String
  sub_scored_at    DateTime         @db.Timestamptz(6)

  @@schema("public")
}

view group_query {
  group_id   Int    @unique
  group_name String @db.VarChar(128)

  @@schema("public")
}

view activities {
  activity_type       String
  activity_created_at DateTime   @db.Timestamptz(6)
  post_id             Int        @unique
  post_title          String     @db.VarChar(128)
  comment_id          Int?
  user_id             Int
  username            String     @db.VarChar(32)
  display_name        String     @db.VarChar(128)
  group_id            Int
  group_name          String     @db.VarChar(128)
  user_status         UserStatus
  email               String?    @db.VarChar(128)
  user_score          Decimal    @db.Decimal(9, 2)
  user_solved         Int
  user_ratio          Decimal    @db.Decimal(9, 2)
  user_rank           BigInt

  @@schema("public")
}

view judge_requests {
  sub_id          Int       @unique
  problem_code    String    @db.VarChar(32)
  sub_code        String    @db.VarChar(32000)
  sub_language    Language
  problem_checker String    @db.VarChar(32000)
  score_type      ScoreType
  time_limit      Decimal   @db.Decimal(4, 2)

  @@schema("public")
}

view problem_headers {
  problem_id   Int    @unique
  problem_code String @db.VarChar(32)
  problem_name String @db.VarChar(128)

  @@schema("public")
}

view solved_submissions {
  id         Int @unique
  problem_id Int
  user_id    Int

  @@schema("public")
}

view user_stats_query {
  problem_id       Int
  problem_code     String   @db.VarChar(32)
  problem_name     String   @db.VarChar(128)
  problem_score    Decimal  @db.Decimal(9, 2)
  sub_id           Int      @unique
  sub_user_id      Int
  sub_submitted_at DateTime @db.Timestamptz(6)
  sub_score        Decimal  @db.Decimal(9, 2)

  @@schema("public")
}

enum Language {
  C__     @map("C++")
  Pascal
  Java
  Python2
  Python3
  Go
  Nasm

  @@map("language")
  @@schema("public")
}

enum ScoreType {
  acm
  oi

  @@map("score_type")
  @@schema("public")
}

enum SubmissionResult {
  AC
  CE
  DQ
  MLE
  Q
  RTE
  SS
  TLE
  TO
  WA
  Scoring @map("...")

  @@map("submission_result")
  @@schema("public")
}

enum UserStatus {
  normal
  admin
  banned

  @@map("user_status")
  @@schema("public")
}
